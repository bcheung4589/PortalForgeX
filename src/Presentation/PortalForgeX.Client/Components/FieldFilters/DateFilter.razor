@inject IJSRuntime JSRuntime

<div class="field-filter date-filter mb-2">
    <label for="@inputId">@DisplayName</label>

    @if (!string.IsNullOrWhiteSpace(HelpText))
    {
        <HelpTextTool CssClass="p-0 px-2" Content="@HelpText" />
    }

    <InputDate @bind-Value="Model.Value" Type="Type" class="@($"form-control {CssClass}")" id="@inputId" min="@Min?.ToString("yyyy-MM-dd")" max="@Max?.ToString("yyyy-MM-dd")" />

    @if (AppliedFilter is not null)
    {
        <span class="badge bg-light text-dark cmd-filter-remove" role="button" title="Click to remove filter." @onclick="Reset">
            @DisplayName: @(DateTime.Parse(AppliedFilter.ToString() ?? "").ToString("dd-MM-yyyy"))
            <span class="fas fa-xmark ms-1 text-danger"></span>
        </span>
    }
</div>

@code {

    [Parameter]
    public IFieldFilter<DateTime?> Model { get; set; } = default!;

    [Parameter]
    public string DisplayName { get; set; } = null!;

    [Parameter]
    public string? CssClass { get; set; }

    [Parameter]
    public object? AppliedFilter { get; set; }

    [Parameter]
    public string? HelpText { get; set; }

    [Parameter]
    public DateTime? Min { get; set; }

    [Parameter]
    public DateTime? Max { get; set; }

    [Parameter]
    public InputDateType Type { get; set; } = InputDateType.Date;

    [Parameter]
    public EventCallback ResetCallback { get; set; }

    private string inputId => DisplayName?.Replace(" ", "") + "DateFilterInput";

    protected override async Task OnAfterRenderAsync(bool firstRender)
        => await JSRuntime.InvokeVoidAsync("formPageLoad");

    protected async Task Reset()
    {
        Model.Reset();
        AppliedFilter = null;

        await ResetCallback.InvokeAsync();
    }
}
