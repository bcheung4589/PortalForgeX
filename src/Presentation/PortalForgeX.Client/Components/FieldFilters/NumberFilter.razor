@inject IJSRuntime JSRuntime

<div class="field-filter number-filter mb-2">
    <label for="@inputId">@DisplayName</label>

    @if (!string.IsNullOrWhiteSpace(HelpText))
    {
        <HelpTextTool CssClass="p-0 px-2" Content="@HelpText" />
    }

    <input @bind="Model.Value" class="form-control @CssClass" id="@inputId" min="@Min" max="@Max" step="@Step" type="number" />

    @if (AppliedFilter is not null)
    {
        <span class="badge bg-light text-dark cmd-filter-remove" role="button" title="Click to remove filter." @onclick="Reset">
            @DisplayName: @AppliedFilter
            <span class="fas fa-xmark ms-1 text-danger"></span>
        </span>
    }
</div>

@code {

    [Parameter]
    public IFieldFilter<string?> Model { get; set; } = null!;

    [Parameter]
    public string DisplayName { get; set; } = null!;

    [Parameter]
    public string? CssClass { get; set; }

    [Parameter]
    public object? AppliedFilter { get; set; }

    [Parameter]
    public string? HelpText { get; set; }

    [Parameter]
    public string? Min { get; set; }

    [Parameter]
    public string? Max { get; set; }

    [Parameter]
    public string? Step { get; set; }

    [Parameter]
    public EventCallback ResetCallback { get; set; }

    private string inputId => DisplayName?.Replace(" ", "") + "NumberFilterInput";

    protected async Task Reset()
    {
        Model.Reset();
        AppliedFilter = null;

        await ResetCallback.InvokeAsync();
    }
}
