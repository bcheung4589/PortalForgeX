@page "/businesslocation/{Id:int}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Sections
@using PortalForgeX.Client.Components.Breadcrumbs
@using PortalForgeX.Client.Components.Widgets.DetailsViews
@using PortalForgeX.Client.Components.Widgets.ModelBrowsers
@using PortalForgeX.Shared.Features.BusinessLocations
@using PortalForgeX.Shared.Constants
@using PortalForgeX.Shared.Facades

@rendermode RenderMode.InteractiveWebAssembly
@attribute [StreamRendering(true)]
@attribute [Authorize(Roles = $"{SystemRolesNames.ADMIN}, {SystemRolesNames.MANAGER}, {SystemRolesNames.TENANT_ADMIN}, {SystemRolesNames.TENANT_USER}")]

@inject IBusinessLocationFacade BusinessLocations
@inject NavigationManager Navigation

<PageTitle>Location Details</PageTitle>

<SectionContent SectionName="top-row">
    <BreadcrumbNavigation>
        <Breadcrumb DisplayText="Clients" Url="/clients" IconCssClass="fas fa-users" />
        <Breadcrumb DisplayText="@(Model?.Client?.Name)" Url="@($"/client/{Model?.ClientId}")" IconCssClass="fas fa-user-tie" />
        <Breadcrumb DisplayText="@($"{Model?.Street} {Model?.HouseNr}")" IconCssClass="fas fa-building" />
    </BreadcrumbNavigation>
</SectionContent>

<LoadingArea IsLoading="IsLoading">
    <BusinessLocationDetailsView BusinessLocation="Model" ClientName="@Model.Client?.Name" />

    <details class="mb-4 mt-2" open>
        <summary>
            <h4 class="d-inline-block">Checkouts (@Model.Checkouts?.Count())</h4>
            <CheckoutCreateDialog BusinessLocationId="Model.Id"></CheckoutCreateDialog>
            <span class="clearfix"></span>
            <div class="text-muted">Manage the checkouts of this location.</div>
        </summary>
        <CheckoutsBrowser BusinessLocation="Model" />
    </details>
</LoadingArea>

@code {

    [Parameter]
    public int Id { get; set; }

    protected bool IsLoading;
    protected BusinessLocationDto Model { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        var result = await BusinessLocations.GetByIdAsync(Id);
        if (result is null || result.Data is null)
        {
            Navigation.NavigateTo($"client/{Model.ClientId}");
            return;
        }

        Model = result.Data;
        IsLoading = false;
        StateHasChanged();
    }

}
