@using AutoMapper
@using Microsoft.AspNetCore.Identity
@using PortalForgeX.Application.Tenants
@using PortalForgeX.Client.Components.Internal
@using PortalForgeX.Domain.Entities.Tenants
@using PortalForgeX.Shared.Features.Tenants

@inherits FormComponent<TenantUserFormModel>

@inject IMapper Mapper
@inject ITenantService TenantService
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<ApplicationRole> RoleManager

<button class="btn btn-primary float-end" @onclick="async () => await Dialog.OpenDialog()">
    <span class="fas fa-plus"></span>
    Create
</button>
<Dialog @ref="Dialog">
    <Header>
        <h1>Add Tenant User</h1>
        <span class="text-muted">Fill in the user details.</span>
    </Header>
    <Body>
        <EditForm FormName="CreateTenantUserForm" EditContext="FormEditContext" OnValidSubmit="SaveAsync">
            <FluentValidationValidator />
            <div class="row">
                <div class="col">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Model!.Title" class="form-control form-control-solid" id="titleInput" maxlength="100" placeholder="Title" />
                        <HelpTextTool Content="Input the user title." />
                        <label for="titleInput">Title</label>
                        <span class="chars-counter">100 chars left</span>
                        <ValidationMessage For="(() => Model!.Title)" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Model!.Email" class="form-control form-control-solid" id="emailInput" maxlength="450" placeholder="Email" required />
                        <HelpTextTool Content="Input the user email." />
                        <label for="emailInput">Email*</label>
                        <span class="chars-counter">450 chars left</span>
                        <ValidationMessage For="(() => Model!.Email)" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Password" type="password" class="form-control form-control-solid" id="passwordInput" placeholder="Password" required />
                        <HelpTextTool Content="Input the user password." />
                        <label for="passwordInput">Password*</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="PasswordConfirm" type="password" class="form-control form-control-solid" id="passwordConfirmInput" placeholder="Confirm password" required />
                        <HelpTextTool Content="Confirm the user password." />
                        <label for="passwordConfirmInput">Confirm password*</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Model!.FirstName" class="form-control form-control-solid" id="firstnameInput" maxlength="100" placeholder="Firstname" />
                        <HelpTextTool Content="Input the user firstname." />
                        <label for="firstnameInput">Firstname*</label>
                        <span class="chars-counter">100 chars left</span>
                        <ValidationMessage For="(() => Model!.FirstName)" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Model!.LastName" class="form-control form-control-solid" id="lastnameInput" maxlength="100" placeholder="LastName" />
                        <HelpTextTool Content="Input the user lastname." />
                        <label for="lastnameInput">Lastname*</label>
                        <span class="chars-counter">100 chars left</span>
                        <ValidationMessage For="(() => Model!.LastName)" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="mb-3">
                        <HelpTextTool Content="Select the roles for this user." />
                        <label>Roles</label>
                        @if (UserRoles.Any())
                        {
                            var inputId = "cbRole";
                            var checkboxId = inputId;
                            var i = 0;
                            @foreach (var role in UserRoles)
                            {
                                i += 1;
                                checkboxId = inputId + i;

                                <span class="form-check form-check-custom form-check-solid">
                                    <input @oninput="(e) => OnChanged(e, role.Key.Id)"
                                           class="form-check-input" checked="@UserRoles[role.Key]" id="@checkboxId" type="checkbox" />
                                    <label for="@checkboxId" class="form-check-label">
                                        @role.Key.Name
                                        <span class="text-muted small">(@role.Key.RoleType)</span>
                                    </label>
                                </span>
                            }
                        }
                        else
                        {
                            <span>No roles found.</span>
                        }
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-check form-switch form-check-custom form-check-solid mb-3">
                        <InputCheckbox class="form-check-input me-1" id="isActiveInput" @bind-Value="Model!.IsActive" placeholder="Active" />
                        <label class="form-check-label text-muted" for="isActiveInput">Active</label>
                        <HelpTextTool Content="Indicates if the user is an active user." />
                        <ValidationMessage For="(() => Model!.IsActive)" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-floating mb-3">
                        <InputTextArea class="form-control form-control-solid" id="remarksInput" @bind-Value="Model!.Remarks" placeholder="Remarks" maxlength="500" style="height: 100px"></InputTextArea>
                        <label for="remarksInput">Remarks</label>
                        <span class="chars-counter">500 chars left</span>
                        <HelpTextTool Content="Remarks." />
                        <ValidationMessage For="(() => Model!.Remarks)" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col text-end">
                    <button class="btn btn-secondary" type="button" @onclick="async () => await Dialog.CloseDialog()">Cancel</button>
                    <SubmitSpinnerButton IsLoading="@IsLoading"></SubmitSpinnerButton>
                </div>
            </div>
        </EditForm>
    </Body>
</Dialog>

@code {

    [Parameter]
    public Tenant Tenant { get; set; } = null!;

    protected Dialog Dialog = null!;
    protected override TenantUserFormModel InitModel => new() { TenantId = Tenant.Id, IsActive = true };
    protected string Password = null!;
    protected string PasswordConfirm = null!;
    protected IDictionary<ApplicationRole, bool> UserRoles = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        UserRoles = RoleManager.Roles
            .Where(x => x.Name!.StartsWith("Tenant"))
            .OrderBy(x => x.Name)
            .ToDictionary(x => x, x => false);
    }

    protected async Task SaveAsync()
        => await TryRunAsync(async () =>
        {
            if (string.IsNullOrWhiteSpace(Password))
            {
                ToastService.ShowError("Password is required.");
                return;
            }

            if (Password != PasswordConfirm)
            {
                ToastService.ShowError("Password did not match confirmation password.");
                return;
            }

            var selectedRoles = UserRoles.Where(x => x.Value).Select(x => x.Key).Select(x => x.Name!);
            var successResult = await TenantService.CreateTenantProfileAsync(Tenant, Model, Password, selectedRoles);
            if (!successResult)
            {
                if (TenantService.HasError)
                {
                    foreach (var errorMessage in TenantService.Errors)
                    {
                        ToastService.ShowError(errorMessage);
                    }
                }

                return;
            }

            Navigation.NavigateTo($"/tenant/profile/{Model.Id}");
        });

    protected void OnChanged(ChangeEventArgs args, string key)
    {
        var role = UserRoles.FirstOrDefault(x => x.Key.Id == key).Key;
        if (role is null)
        {
            return;
        }

        UserRoles[role] = !UserRoles[role];
    }

}
