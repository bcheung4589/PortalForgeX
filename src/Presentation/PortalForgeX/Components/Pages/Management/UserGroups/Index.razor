@page "/usergroups"

@using PortalForgeX.Application.Tenants
@using PortalForgeX.Client.Components.ContextMenu
@using PortalForgeX.Client.Components.DataGrid
@using PortalForgeX.Client.Components.FieldFilters
@using PortalForgeX.Components.Dialogs
@using PortalForgeX.Shared.Features.UserGroups

@inherits DataPage<UserGroupDto>

@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(true)]
@attribute [Authorize(Roles = $"{SystemRolesNames.ADMIN}, {SystemRolesNames.MANAGER}, {SystemRolesNames.TENANT_ADMIN}")]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TenantAccessor TenantAccessor
@inject IRenderContext RenderContext
@inject IUserGroupFacade UserGroups

<PageTitle>Groups</PageTitle>

<SectionContent SectionName="top-row">
    <BreadcrumbNavigation>
        <Breadcrumb DisplayText="Groups" IconCssClass="fas fa-user-group" />
    </BreadcrumbNavigation>
</SectionContent>

<div class="row">
    <div class="card p-0">
        <div class="card-header">
            <div class="col-lg-8">
                <h1>
                    <span class="fas fa-user-group"></span>
                    Groups Management
                    <sup @onclick="() => Navigation.Refresh(true)" class="fas fa-rotate me-3 fs-6" role="button" title="Force refresh the page."></sup>
                </h1>
                <p class="m-0">Browse and manage the groups.</p>
            </div>
            <div class="col-lg-4">
                <UserGroupCreateDialog />
            </div>
        </div>
        <div class="card-body pt-0">
            <ModuleLoadingArea IsLoading="RenderContext.IsPrerendering">
                <div class="row">
                    <div class="col-lg">
                        <LoadingArea IsLoading="@IsLoading" IsEmpty="@(DataSource is not null && DataSource.Count < 1)">
                            <ChildContent>
                                <DataGrid TEntity="UserGroupDto"
                                          DataSource="@DataSource"
                                          OnPageSizeChanged="DataPageSizeChanged"
                                          OnPageChanged="DataPageChanged"
                                          OnSortChanged="DataSortChanged"
                                          OnSortReset="ResetSorting">
                                    <DataGridColumn TEntity="UserGroupDto" Field="@nameof(UserGroupDto.Name)" HeaderName="Name" OnSelected="(e) => NavigateTo(e)"></DataGridColumn>
                                    <DataGridColumn Field="@nameof(UserGroupDto.Description)" HeaderName="Description"></DataGridColumn>
                                    <DataGridColumn HeaderCssClass="text-end w-100px" RowCssClass="text-end">
                                        <Template>
                                            <ContextMenu Model="@context">
                                                <MenuItem TEntity="UserGroupDto" DisplayText="View" IconCss="fas fa-eye" OnSelected="(e) => NavigateTo(e)"></MenuItem>
                                                <MenuItem TEntity="UserGroupDto" DisplayText="Delete" IconCss="fas fa-trash" OnSelected="async (e) => await Delete(e)"></MenuItem>
                                            </ContextMenu>
                                        </Template>
                                    </DataGridColumn>
                                </DataGrid>
                            </ChildContent>
                            <EmptyTemplate>
                                <p class="text-muted">No usergroups found.</p>
                            </EmptyTemplate>
                        </LoadingArea>
                    </div>
                </div>
            </ModuleLoadingArea>
        </div>
    </div>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        if (RenderContext.IsPrerendering)
        {
            return; // no need for prerendering
        }

        /// Require Tenant or move away.
        await TenantAccessor.RequireTenantAsync(AuthenticationStateProvider, Navigation);

        /// Run as usual.
        await base.OnInitializedAsync();
    }

    protected override async Task InitDataSourcesAsync()
        => DataSource = (await UserGroups.GetAsync(PageIndex, PageSize, SortField, SortAsc ?? false))?.Data;

    protected void NavigateTo(UserGroupDto usergroup)
        => Navigation.NavigateTo($"usergroup/{usergroup.Id}");

    protected async Task Delete(UserGroupDto usergroup)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete usergroup {usergroup.Name}? Deleting is permanent.");
        if (!confirmed)
        {
            return;
        }

        await TryRunAsync(async () =>
        {
            if ((await UserGroups.DeleteAsync(usergroup.Id))?.IsSuccess != true)
            {
                return;
            }

            ToastService.ShowSuccess($"Usergroup {usergroup.Name} was succesfully deleted.");

            await InitDataSourcesAsync();
        });
    }

}
