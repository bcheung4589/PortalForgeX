@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using PortalForgeX.Extensions
@using PortalForgeX.Identity
@using PortalForgeX.Identity.Extensions

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm id="account" Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" Enhance>
                <ValidationSummary class="text-danger" />
                <div class="form-floating mb-3">
                    <InputText id="email" @bind-Value="Input.Email" class="form-control form-control-solid" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText id="password" type="password" @bind-Value="Input.Password" class="form-control form-control-solid" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button id="login-submit" type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div class="my-2">
                    <p>
                        <a id="forgot-password" href="/Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    @* DISABLE REGISTER
                    <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("/Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                    <a id="resend-confirmation" href="/Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                    *@
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <ExternalLoginPicker />
    </div>
</div>

@code {
    string? errorMessage;

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    public InputModel Input { get; set; } = default!;

    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; } = "";

    public class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = null!;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = null!;

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } = false;
    }

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        ReturnUrl ??= "/";

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            await SignInManager.UserManager.RegisterSucceededLoginAsync(Input.Email);

            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("/Account/LoginWith2fa", new() { ["ReturnUrl"] = ReturnUrl, ["RememberMe"] = Input.RememberMe });
        }
        if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("/Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }
}
