@page "/user/{Id:guid}"

@using AutoMapper
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PortalForgeX.Application.Data
@using PortalForgeX.Domain.Entities.Identity
@using PortalForgeX.Identity.Extensions
@using PortalForgeX.Persistence.EFCore
@using PortalForgeX.Shared.Features.Tenants

@inherits FormPage<TenantUserFormModel>

@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(true)]
@attribute [Authorize(Roles = SystemRolesNames.ADMIN)]

@inject IDbContextFactory<PortalContext> PortalContextFactory
@inject IDomainContextFactory DomainContextFactory
@inject IMapper Mapper
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<ApplicationRole> RoleManager

<PageTitle>User Details</PageTitle>

<SectionContent SectionName="top-row">
    <BreadcrumbNavigation>
        <Breadcrumb DisplayText="Users" Url="/users" IconCssClass="fas fa-users-rectangle" />
        <Breadcrumb DisplayText="@(Model?.Email)" IconCssClass="fas fa-user" />
    </BreadcrumbNavigation>
</SectionContent>

<LoadingArea IsLoading="IsLoading">
    <div class="card">
        <div class="card-header">
            <div class="col-lg-8">
                <h1>@Model.UserName</h1>
            </div>
            <div class="col-lg-4 text-end">
                <button @onclick="DeleteAsync" class="btn btn-danger" type="button">Delete</button>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-lg-6">
                    <div class="card bg-light mb-3">
                        <div class="card-body">
                            <div class="row">
                                <label class="col-lg-6 text-muted">
                                    Created
                                </label>
                                <div class="col-lg-6">
                                    <data class="fs-6 text-gray-800">
                                        @Model.CreationTime.ToString("dd-MM-yyyy hh:mm:ss")
                                    </data>
                                </div>
                            </div>
                            @if (Model.LastModificationTime is not null)
                            {
                                    <div class="row">
                                        <label class="col-lg-6 text-muted">
                                            Last Modified
                                        </label>
                                        <div class="col-lg-6">
                                            <data class="fs-6 text-gray-800">
                                            @Model.LastModificationTime?.ToString("dd-MM-yyyy hh:mm:ss")
                                            </data>
                                        </div>
                                    </div>
                            }
                            @if (Model.LastLoggedInTime is not null)
                            {
                                    <div class="row">
                                        <label class="col-lg-6 text-muted">
                                            Last Logged in
                                        </label>
                                        <div class="col-lg-6">
                                            <data class="fs-6 text-gray-800">
                                            @Model.LastLoggedInTime?.ToString("dd-MM-yyyy hh:mm:ss")
                                            </data>
                                        </div>
                                    </div>
                            }
                            @if (Model.LockoutEnd is not null)
                            {
                                    <div class="row">
                                        <label class="col-lg-6 text-muted">
                                            Lockout Enddate
                                        </label>
                                        <div class="col-lg-6">
                                            <data class="fs-6 text-gray-800">
                                            @Model.LockoutEnd
                                            </data>
                                        </div>
                                    </div>
                            }
                            <div class="row">
                                <label class="col-lg-6 text-muted">
                                    Access Failed Counter
                                </label>
                                <div class="col-lg-6">
                                    <data class="fs-6 text-gray-800">
                                        @Model.AccessFailedCount <span class="text-muted">x</span>
                                    </data>
                                </div>
                            </div>
                            @if (Model.TenantId != Guid.Empty)
                            {
                                                    <div class="row">
                                                        <a class="mx-2" href="/tenant/@Model.TenantId">
                                                            <span class="fas fa-handshake-angle me-1"></span>
                                        @Model.TenantName
                                                        </a>
                                                    </div>
                            }
                        </div>
                    </div>
                    <EditForm FormName="EditUserForm" EditContext="FormEditContext" OnValidSubmit="SaveAsync">
                        <FluentValidationValidator />
                        <div class="row mb-3">
                            <div class="col">
                                <TextFormField @bind-Value="Model.Email"
                                               TViewModel="TenantUserFormModel"
                                               DisplayName="Email"
                                               HelpText="Email of the user."
                                               Required="true"
                                               Type="email"
                                               Model="Model"
                                               ValidationFor="() => Model!.Email"
                                               SaveCallback="SaveAsync">
                                    <ViewTemplate Context="template">
                                        <div>
                                            <HelpTextTool Content="Email of the user." />
                                            <span class="text-muted">Email</span>
                                        </div>
                                        <data @ondblclick="template.Edit" class="ps-4">
                                            @template.Model.Email
                                        </data>
                                    </ViewTemplate>
                                </TextFormField>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <TextFormField @bind-Value="Model.FirstName"
                                               TViewModel="TenantUserFormModel"
                                               DisplayName="Firstname"
                                               HelpText="Firstname of the user."
                                               MaxLength="100"
                                               Model="Model"
                                               ValidationFor="() => Model!.FirstName"
                                               SaveCallback="SaveAsync">
                                    <ViewTemplate Context="template">
                                        <div>
                                            <HelpTextTool Content="Firstname of the user." />
                                            <span class="text-muted">Firstname</span>
                                        </div>
                                        <data @ondblclick="template.Edit" class="ps-4">
                                            @template.Model.FirstName
                                        </data>
                                    </ViewTemplate>
                                </TextFormField>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <TextFormField @bind-Value="Model.LastName"
                                               TViewModel="TenantUserFormModel"
                                               DisplayName="Lastname"
                                               HelpText="Lastname of the user."
                                               MaxLength="100"
                                               Model="Model"
                                               ValidationFor="() => Model!.LastName"
                                               SaveCallback="SaveAsync">
                                    <ViewTemplate Context="template">
                                        <div>
                                            <HelpTextTool Content="Lastname of the user." />
                                            <span class="text-muted">Lastname</span>
                                        </div>
                                        <data @ondblclick="template.Edit" class="ps-4">
                                            @template.Model.LastName
                                        </data>
                                    </ViewTemplate>
                                </TextFormField>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <TextFormField @bind-Value="Model.PhoneNumber"
                                               TViewModel="TenantUserFormModel"
                                               DisplayName="Phonenumber"
                                               HelpText="PhoneNumber of the user."
                                               Model="Model"
                                               ValidationFor="() => Model!.PhoneNumber"
                                               SaveCallback="SaveAsync">
                                    <ViewTemplate Context="template">
                                        <div>
                                            <HelpTextTool Content="PhoneNumber of the user." />
                                            <span class="text-muted">Phonenumber</span>
                                        </div>
                                        <data @ondblclick="template.Edit" class="ps-4">
                                            <NullableField Value="@template.Model.PhoneNumber" />
                                        </data>
                                    </ViewTemplate>
                                </TextFormField>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <CheckboxFormField @bind-Value="Model.LockoutEnabled"
                                                   TViewModel="TenantUserFormModel"
                                                   DisplayName="Lockout Enabled"
                                                   HelpText="Indicator if the user can be locked out."
                                                   Model="Model"
                                                   ValidationFor="() => Model.LockoutEnabled"
                                                   SaveCallback="SaveAsync">
                                    <ViewTemplate Context="template">
                                        <div>
                                            <HelpTextTool Content="Indicator if the user can be locked out." />
                                            <span class="text-muted">Lockout Enabled</span>
                                        </div>
                                        <data @ondblclick="template.Edit" class="ps-4">
                                            <SwitchCircleIndicator IsOn="@template.Model.LockoutEnabled" Title="Enabled" OffTitle="Disabled" CssClass="ms-3 mb-2 mt-2" />
                                        </data>
                                    </ViewTemplate>
                                </CheckboxFormField>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <CheckboxFormField @bind-Value="Model.IsActive"
                                                   TViewModel="TenantUserFormModel"
                                                   DisplayName="Actief"
                                                   HelpText="Indicator if the user is active."
                                                   Model="Model"
                                                   ValidationFor="() => Model.IsActive"
                                                   SaveCallback="SaveAsync">
                                    <ViewTemplate Context="template">
                                        <div>
                                            <HelpTextTool Content="Indicator if the user is active." />
                                            <span class="text-muted">Actief</span>
                                        </div>
                                        <data @ondblclick="template.Edit" class="ps-4">
                                            <SwitchCircleIndicator IsOn="@template.Model.IsActive" Title="Actief" OffTitle="Inactief" CssClass="ms-3 mb-2 mt-2" />
                                        </data>
                                    </ViewTemplate>
                                </CheckboxFormField>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <TextAreaFormField @bind-Value="Model.Remarks"
                                                   TViewModel="TenantUserFormModel"
                                                   DisplayName="Remarks about the user."
                                                   HelpText="Remarks about the user."
                                                   MaxLength="2000"
                                                   Model="Model"
                                                   SaveCallback="SaveAsync"
                                                   ValidationFor="() => Model.Remarks">
                                    <ViewTemplate Context="template">
                                        <div>
                                            <HelpTextTool Content="Remarks about the user." />
                                            <span class="text-muted">Remarks</span>
                                        </div>
                                        <data @ondblclick="template.Edit" class="ps-4">
                                            <NullableField Value="@template.Model.Remarks" />
                                        </data>
                                    </ViewTemplate>
                                </TextAreaFormField>
                            </div>
                        </div>
                    </EditForm>
                </div>
                <div class="col-lg-6">
                    <div class="row mb-3">
                        <div class="col">
                            <EditForm FormName="EditPasswordForm" EditContext="FormEditContext" OnValidSubmit="UpdatePasswordAsync">
                                <div class="card warning border-1 p-2 py-3">
                                    <div class="card-header">
                                        <h5>Change Password</h5>
                                    </div>
                                    <div class="card-body pb-0">
                                        <div class="row">
                                            <div class="col">
                                                <div class="form-floating mb-3">
                                                    <InputText @bind-Value="Password" type="password" class="form-control form-control-solid" id="passwordInput" placeholder="Password" />
                                                    <HelpTextTool Content="Input the new user password." />
                                                    <label for="passwordInput">Password</label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col">
                                                <div class="form-floating mb-3">
                                                    <InputText @bind-Value="PasswordConfirm" type="password" class="form-control form-control-solid" id="passwordConfirmInput" placeholder="Confirm password" />
                                                    <HelpTextTool Content="Confirm the new user password." />
                                                    <label for="passwordConfirmInput">Confirm password</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card-footer">
                                        <SubmitSpinnerButton IsLoading="@IsLoading" IdleText="Update Password" BtnCssClass="btn-warning"></SubmitSpinnerButton>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            @if (UserRoles.Any())
                            {
                                var inputId = "cbRole";
                                var checkboxId = inputId;
                                var i = 0;
                                    <EditForm FormName="EditUserRolesForm" EditContext="FormEditContext" OnValidSubmit="UpdateRolesAsync">
                                        <div class="card warning border-1 p-2 py-3">
                                            <div class="card-header">
                                                <h5>Roles</h5>
                                            </div>
                                            <div class="card-body py-0">
                                            @foreach (var role in UserRoles)
                                            {
                                                i += 1;
                                                checkboxId = inputId + i;

                                                        <span class="form-check form-check-custom form-check-solid">
                                                            <input @oninput="(e) => OnChanged(e, role.Key.Id)"
                                                                   class="form-check-input" checked="@UserRoles[role.Key]" id="@checkboxId" type="checkbox" />
                                                            <label for="@checkboxId" class="form-check-label">
                                                        @role.Key.Name
                                                                <span class="text-muted small">(@role.Key.RoleType)</span>
                                                            </label>
                                                        </span>
                                            }
                                            </div>
                                            <div class="card-footer">
                                                <SubmitSpinnerButton IsLoading="@IsLoading" IdleText="Update Roles" BtnCssClass="btn-warning"></SubmitSpinnerButton>
                                            </div>
                                        </div>
                                    </EditForm>
                            }
                            else
                            {
                                    <span>No roles found.</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</LoadingArea>

@code {

    [Parameter]
    public Guid Id { get; set; }

    protected override TenantUserFormModel InitModel => new() { IsActive = true };
    protected IDictionary<ApplicationRole, bool> UserRoles = null!;
    protected string? Password;
    protected string? PasswordConfirm;

    protected override async Task OnInitializedAsync() => await LoadDataAsync();

    protected async Task LoadDataAsync() => await TryRunAsync(async () =>
    {
        var result = await UserManager.FindByIdAsync(Id.ToString());
        if (result is null)
        {
            Navigation.NavigateTo("clients");
            return;
        }

        Model = Mapper.Map<TenantUserFormModel>(result);

        if (Model.TenantId != Guid.Empty)
        {
            using var portalContext = await PortalContextFactory.CreateDbContextAsync();
            var dbTenant = await portalContext.Tenants.FindAsync(Model.TenantId);
            if (dbTenant is not null)
            {
                Model.TenantName = dbTenant.Name;
            }
        }

        UserRoles = new Dictionary<ApplicationRole, bool>();
        var roles = RoleManager.Roles.OrderBy(x => x.Name).ToArray();
        foreach (var role in roles)
        {
            if (role is null || role.Name is null)
            {
                continue;
            }

            UserRoles[role] = await UserManager.IsInRoleAsync(result, role.Name);
        }

        BindModelContext();
        StateHasChanged();
    });

    protected void OnChanged(ChangeEventArgs args, string key)
    {
        var role = UserRoles.FirstOrDefault(x => x.Key.Id == key).Key;
        if (role is null)
        {
            return;
        }

        UserRoles[role] = !UserRoles[role];
    }

    protected async Task SaveAsync() => await TryRunAsync(async () =>
    {
        var user = await UserManager.FindByIdAsync(Model.Id);
        if (user is null)
        {
            return;
        }

        user.Email = Model.Email;
        user.PhoneNumber = Model.PhoneNumber;
        user.LockoutEnabled = Model.LockoutEnabled;
        user.IsActive = Model.IsActive;
        user.Remarks = Model.Remarks;
        user.LastModificationTime = DateTime.UtcNow;

        var result = await UserManager.UpdateAsync(user);
        if (!result.Succeeded)
        {
            foreach (var errorMessage in result.Errors)
            {
                ToastService.ShowError(errorMessage.Description);
            }

            return;
        }

        ToastService.ShowSuccess("User was successfully updated.");

        await LoadDataAsync();
    });

    protected async Task UpdateRolesAsync() => await TryRunAsync(async () =>
    {
        var user = await UserManager.FindByIdAsync(Model.Id);
        if (user is null)
        {
            return;
        }

        var updateResult = await UserManager.UpdateRolesAsync(user, UserRoles);
        if (!updateResult.Succeeded)
        {
            foreach (var errorMessage in updateResult.Errors)
            {
                ToastService.ShowError(errorMessage.Description);
            }

            return;
        }

        ToastService.ShowSuccess("User roles was successfully updated. Login again for it to take effect.");

        await LoadDataAsync();
    });

    protected async Task UpdatePasswordAsync() => await TryRunAsync(async () =>
    {
        if (string.IsNullOrWhiteSpace(Password))
        {
            ToastService.ShowError("Password is required.");
            return;
        }

        if (Password != PasswordConfirm)
        {
            ToastService.ShowError("Password did not match confirmation password.");
            return;
        }

        var user = await UserManager.FindByIdAsync(Model.Id);
        if (user is null)
        {
            return;
        }

        var changePasswordResult = await UserManager.UpdatePasswordAsync(user, Password);
        if (!changePasswordResult.Succeeded)
        {
            foreach (var errorMessage in changePasswordResult.Errors)
            {
                ToastService.ShowError(errorMessage.Description);
            }
            return;
        }

        Password = PasswordConfirm = null;
        ToastService.ShowSuccess("Password was successfully updated.");

        await LoadDataAsync();
    });

    protected async Task DeleteAsync() => await TryRunAsync(async () =>
    {
        if (Model.Email == SystemUserAccounts.ADMIN_EMAIL)
        {
            ToastService.ShowError("You are not allowed to delete the root admin.");
            return;
        }

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user {Model.Email}? Deleting is permanent.");
        if (!confirmed)
        {
            return;
        }

        var user = await UserManager.FindByIdAsync(Model.Id);
        if (user is null)
        {
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            foreach (var errorMessage in result.Errors)
            {
                ToastService.ShowError(errorMessage.Description);
            }
            return;
        }

        if (Model.TenantId != Guid.Empty)
        {
            using var portalContext = await PortalContextFactory.CreateDbContextAsync();
            var dbTenant = await portalContext.Tenants.FindAsync(Model.TenantId);
            if (dbTenant is null)
            {
                return;
            }

            using var domainContext = DomainContextFactory.CreateDomainContext(dbTenant);
            _ = await domainContext.UserProfiles
                .Where(x => x.UserId.Equals(Model.Id))
                .ExecuteDeleteAsync();
        }

        ToastService.ShowSuccess($"User {Model.Email} was succesfully deleted.");
        Navigation.NavigateTo("users");
    });

}
