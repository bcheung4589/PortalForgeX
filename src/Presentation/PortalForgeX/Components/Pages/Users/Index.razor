@page "/users"

@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PortalForgeX.Application.Data
@using PortalForgeX.Application.Tenants
@using PortalForgeX.Client.Components.ContextMenu
@using PortalForgeX.Components.Dialogs
@using PortalForgeX.Domain.Entities.Tenants
@using PortalForgeX.Persistence.EFCore

@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(true)]
@attribute [Authorize(Roles = SystemRolesNames.ADMIN)]

@inject IDbContextFactory<PortalContext> PortalContextFactory
@inject IDomainContextFactory DomainContextFactory
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

<PageTitle>Users</PageTitle>

<SectionContent SectionName="top-row">
    <BreadcrumbNavigation>
        <Breadcrumb DisplayText="Users" IconCssClass="fas fa-users-rectangle" />
    </BreadcrumbNavigation>
</SectionContent>

<div class="row">
    <div class="card">
        <div class="card-header">
            <div class="col-lg-8">
                <h1>
                    <span class="fas fa-users"></span>
                    Users Management
                </h1>
                <p class="m-0">Browse and manage the users.</p>
            </div>
            <div class="col-lg-4">
                <UserCreateDialog @rendermode="RenderMode.InteractiveServer" />
            </div>
        </div>
        <div class="card-body mt-0">
            <LoadingArea IsLoading="isLoading">
                @if (users.Any())
                {
                    <p>@users.Count() items found.</p>
                    <QuickGrid Items="users" Class="table table-striped">
                        <TemplateColumn Title="Email" SortBy="GridSort<ApplicationUser>.ByAscending(p => p.Email)">
                            <SwitchCircleIndicator IsOn="@context.IsActive" CssClass="me-2" Title="Active" OffTitle="Inactive" />
                            <a href="mailto:@context.Email">@context.Email</a>
                        </TemplateColumn>
                        <TemplateColumn Title="Name" SortBy="GridSort<ApplicationUser>.ByAscending(p => p.UserName)">
                            <span @onclick="@(() => NavigateTo(context))" role="button" title="View details of @context.UserName">@context.FirstName @context.LastName</span>
                        </TemplateColumn>
                        <TemplateColumn Title="Tenant" SortBy="GridSort<ApplicationUser>.ByAscending(p => p.TenantId)">
                            <NullableField Value="@context.TenantId">
                                <a href="@($"/tenant/{context.TenantId}")">@context.Tenant?.Name</a>
                            </NullableField>
                        </TemplateColumn>
                        <TemplateColumn Title="Last logged in" SortBy="GridSort<ApplicationUser>.ByAscending(p => p.LastLoggedInTime)">
                            <NullableField Value="@context.LastLoggedInTime?.ToString("dd-MM-yyyy HH:mm")" />
                        </TemplateColumn>
                        <TemplateColumn>
                            <ContextMenu Model="@context">
                                <MenuItem TEntity="ApplicationUser" DisplayText="View" IconCss="fas fa-eye" OnSelected="(e) => NavigateTo(e)"></MenuItem>
                                <MenuItem TEntity="ApplicationUser" DisplayText="Delete" IconCss="fas fa-trash" OnSelected="async (e) => await DeleteAsync(e)"></MenuItem>
                            </ContextMenu>
                        </TemplateColumn>
                    </QuickGrid>
                }
                else
                {
                    <p class="text-muted">No users found.</p>
                }
            </LoadingArea>
        </div>
    </div>
</div>

@code {

    private IQueryable<ApplicationUser> users = null!;
    private IDictionary<Guid, Tenant> tenants = null!;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        tenants = new Dictionary<Guid, Tenant>();
        users = UserManager.Users
            .ToArray().AsQueryable(); // detach from the EF IQueryable

        using var portalContext = await PortalContextFactory.CreateDbContextAsync();
        foreach (var tenantUser in users.Where(x => x.TenantId != null).ToArray())
        {
            var tenantId = tenantUser.TenantId!.Value;
            if (tenants.ContainsKey(tenantId))
            {
                tenantUser.Tenant = tenants[tenantId];
                continue;
            }

            var dbTenant = await portalContext.Tenants.FindAsync(tenantId);
            if (dbTenant is null)
            {
                continue;
            }

            tenantUser.Tenant = dbTenant;
            tenants[dbTenant.Id] = dbTenant;
        }

        isLoading = false;
    }

    protected void NavigateTo(ApplicationUser user)
        => Navigation.NavigateTo($"user/{user.Id}");

    protected async Task DeleteAsync(ApplicationUser user)
    {
        if (user.Email == SystemUserAccounts.ADMIN_EMAIL)
        {
            ToastService.ShowError("You are not allowed to delete the root admin.");
            return;
        }

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user {user.UserName}? Deleting is permanent.");
        if (!confirmed)
        {
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            foreach (var errorMessage in result.Errors)
            {
                ToastService.ShowError(errorMessage.Description);
            }
            return;
        }

        if (user.Tenant is not null)
        {
            using var domainContext = DomainContextFactory.CreateDomainContext(user.Tenant);
            var profileDeleteResult = await domainContext.UserProfiles
                .Where(x => x.UserId.Equals(user.Id))
                .ExecuteDeleteAsync();

            if (profileDeleteResult < 1)
            {
                ToastService.ShowError("Failed deleting profile.");
                return;
            }
        }

        ToastService.ShowSuccess($"User {user.Email} was succesfully deleted.");
        await OnInitializedAsync();
    }

}
